
const unsigned char ImageBuffer[3498] = {0x42,0x4d,0xaa,0x0d,0,0,0,0,0,0,0x36,0,0,0,0x28,0,0,0,0x2a,0,0,0,0x29,0,0,0,0x01,0,0x10,0,0x03,0, 0,0,0x74,0x0d,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xf7,0x5e,0xe7,0xff,0xff, 0xff,0xff,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xd2,0x3a,0xbe,0xc6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xf7,0x11,0x22,0xb0,0x11,0x19,0x95,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0c,0x09,0x73,0x32,0x8a,0,0x33,0x63, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x08,0,0x38,0x95, 0x79,0xa5,0x07,0,0xac,0x29,0x7f,0xef,0xff,0xff,0xde,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0x06,0,0xb6,0x94,0xff,0xff,0x9d,0xce,0x48,0,0x28,0,0x5b,0xc6,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0x07,0,0x96,0x84,0xbf,0xef,0x9f,0xef,0x3f,0xdf,0x6c,0x21, 0x07,0,0xb6,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0,0x76,0x7c,0x3e,0xdf,0xdd,0xd6, 0xfd,0xd6,0x9f,0xe7,0xf2,0x52,0x06,0,0x11,0x5b,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x48,0,0x36,0x74, 0xdd,0xd6,0x7b,0xc6,0x9c,0xc6,0x7b,0xbe,0x1e,0xd7,0x77,0x7c,0x08,0,0xcd,0x29, 0xbf,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xdf,0xff,0x7f,0xef,0x7f,0xef,0x9f,0xef,0x9f,0xef,0x9f,0xef,0x9f,0xef, 0x7f,0xef,0x9f,0xef,0x7f,0xef,0x9f,0xef,0x9f,0xef,0x9f,0xef,0x9f,0xef,0xbf,0xef, 0x89,0,0x36,0x74,0x7c,0xc6,0x7b,0xc6,0x5b,0xbe,0x5b,0xc6,0x5b,0xbe,0xdd,0xc6, 0x9b,0x9d,0xcc,0x08,0xc9,0x08,0x9c,0xce,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0x37,0x9d,0xab,0,0xcb,0,0xcb,0,0xab,0, 0xcc,0,0xcb,0,0xcb,0,0xcb,0,0xcb,0,0xcb,0,0xcb,0,0xcb,0, 0xcb,0,0xcb,0,0x6b,0,0xf5,0x6b,0x7c,0xc6,0x1a,0xb6,0x3b,0xbe,0x3a,0xb6, 0x5b,0xbe,0x3a,0xb6,0x7c,0xc6,0xfc,0xb5,0x8e,0x21,0x49,0,0x58,0x9d,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x59,0x9d,0x8b,0,0xb9,0x84, 0x97,0x7c,0x98,0x84,0x77,0x7c,0x97,0x84,0x97,0x7c,0x97,0x7c,0x97,0x7c,0x98,0x84, 0x77,0x7c,0x98,0x84,0x97,0x7c,0x98,0x7c,0x77,0x7c,0xb9,0xa5,0x5b,0xbe,0x5b,0xbe, 0x3b,0xbe,0x5b,0xbe,0x3a,0xb6,0x5b,0xbe,0x1a,0xbe,0x7c,0xc6,0xbe,0xc6,0x13,0x43, 0x49,0,0xb4,0x63,0xff,0xff,0xff,0xff,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x59,0x9d, 0xab,0,0xff,0xce,0x9c,0xc6,0x7d,0xc6,0x9d,0xce,0x9c,0xc6,0x9d,0xc6,0x9c,0xc6, 0x9d,0xc6,0x9c,0xc6,0x9d,0xc6,0x9c,0xc6,0x9c,0xc6,0x9c,0xc6,0x9d,0xc6,0x7b,0xbe, 0x5c,0xc6,0x5b,0xbe,0x7b,0xbe,0x5b,0xbe,0x5c,0xc6,0x5b,0xbe,0x7b,0xbe,0x7b,0xbe, 0x7b,0xc6,0xde,0xce,0x57,0x74,0x6a,0,0x71,0x3a,0xff,0xf7,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0x9a,0xa5,0xec,0,0xdf,0xce,0x7b,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6, 0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6, 0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xc6, 0x7c,0xc6,0x9c,0xc6,0x7c,0xc6,0x9c,0xce,0xde,0xce,0x9b,0x9d,0x4d,0x09,0x8d,0x11, 0xfd,0xd6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0x99,0x9d,0x2d,0x01,0xde,0xc6,0x9c,0xce,0x9c,0xc6, 0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6, 0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6, 0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9c,0xc6,0x9c,0xce,0x9b,0xc6,0x9b,0xc6,0xdd,0xce, 0x7e,0xbe,0x10,0x22,0x2d,0x01,0xdb,0x9d,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xba,0xa5,0x4e,0x01,0x1f,0xd7, 0xbc,0xce,0xbd,0xce,0x9c,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce, 0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce, 0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xce,0xbc,0xd6, 0x9c,0xce,0xdc,0xce,0xdc,0xce,0xff,0xd6,0x54,0x4b,0x6f,0x01,0x77,0x6c,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xba,0x9d, 0x6f,0x01,0x7f,0xdf,0x1d,0xdf,0xfd,0xd6,0xfd,0xde,0xfd,0xd6,0xfd,0xde,0xfc,0xd6, 0xfd,0xde,0xfd,0xd6,0xfd,0xde,0xfc,0xd6,0xfd,0xd6,0xfd,0xd6,0xfd,0xde,0xfc,0xd6, 0xfd,0xde,0xfd,0xd6,0xfd,0xde,0xfd,0xd6,0xfd,0xde,0xfd,0xd6,0xfd,0xde,0xfc,0xd6, 0xfd,0xde,0xdc,0xd6,0x1e,0xdf,0xdc,0xd6,0x3d,0xdf,0x7e,0xe7,0xdf,0xe7,0x94,0x22, 0x4e,0x01,0xb8,0xa5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xfc,0xa5,0xb0,0x01,0xdf,0xef,0x5e,0xe7,0x3e,0xe7,0x3e,0xe7,0x5e,0xe7, 0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x5e,0xe7, 0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x5e,0xe7,0x3e,0xe7,0x3e,0xe7, 0x3e,0xe7,0x5e,0xe7,0x3e,0xdf,0x5e,0xe7,0x3d,0xdf,0x7f,0xef,0xff,0xff,0x7f,0xd7, 0xb2,0x22,0x11,0x12,0x1c,0xae,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xdb,0x9d,0xf1,0x09,0xbf,0xe7,0x7e,0xef,0x3e,0xe7, 0x5e,0xe7,0x3e,0xe7,0x3e,0xe7,0x3d,0xe7,0x5e,0xe7,0x3d,0xe7,0x5e,0xe7,0x3d,0xe7, 0x5e,0xe7,0x3d,0xe7,0x3e,0xe7,0x3e,0xe7,0x5e,0xef,0x3e,0xe7,0x5e,0xe7,0x3e,0xe7, 0x5e,0xef,0x3d,0xe7,0x5e,0xe7,0x5e,0xe7,0x5e,0xef,0x3e,0xe7,0x9e,0xef,0xff,0xff, 0x7d,0xae,0x11,0x0a,0xd3,0x2a,0x5f,0xd7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1c,0x9e,0x32,0x0a,0xdf,0xf7, 0x7e,0xf7,0x7e,0xef,0x7e,0xe7,0x7e,0xef,0x5e,0xef,0x7e,0xef,0x5e,0xef,0x7e,0xef, 0x5e,0xef,0x7e,0xef,0x7e,0xef,0x7f,0xef,0x7e,0xef,0x5e,0xef,0x7e,0xef,0x9e,0xef, 0x7e,0xef,0x7e,0xef,0x7e,0xef,0x9f,0xef,0x7e,0xef,0x7f,0xef,0x7e,0xef,0xbf,0xff, 0xff,0xff,0x7b,0x85,0x12,0x02,0xf7,0x53,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1c,0x9e, 0x93,0x12,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xff, 0x9f,0xf7,0x7e,0xe7,0x9f,0xf7,0x9e,0xef,0x9e,0xef,0x9e,0xef,0x7e,0xef,0x9e,0xef, 0xff,0xff,0xff,0xef,0x58,0x5c,0x73,0x0a,0x5b,0x7d,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0x3d,0xa6,0xf6,0x0a,0xfb,0x5c,0xda,0x5c,0xdb,0x64,0xdb,0x5c,0xdb,0x64, 0xdb,0x5c,0xfb,0x64,0xdb,0x5c,0xfb,0x64,0xdb,0x5c,0xfb,0x64,0xdb,0x5c,0xfb,0x64, 0x99,0x5c,0xbd,0xbe,0xdf,0xff,0xbf,0xf7,0x9f,0xef,0x9f,0xf7,0x9f,0xef,0xbf,0xef, 0xbf,0xf7,0xff,0xff,0x9f,0xd7,0xd8,0x3b,0xd5,0x12,0x7d,0xae,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0x7d,0xb6,0x18,0x44,0x37,0x44,0x59,0x44,0x38,0x44, 0x38,0x44,0x37,0x44,0x38,0x44,0x18,0x44,0x39,0x44,0x38,0x44,0x38,0x44,0x38,0x44, 0x39,0x44,0x38,0x3c,0x38,0x13,0xfc,0x95,0xff,0xff,0xbe,0xef,0xdf,0xf7,0xbe,0xf7, 0xbf,0xf7,0xbf,0xf7,0xff,0xff,0xde,0xb6,0x57,0x23,0xb7,0x2b,0x7f,0xcf,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x77,0x23,0x5d,0x9e,0xff,0xff,0xdf,0xff, 0xbf,0xf7,0xdf,0xff,0xdf,0xff,0xff,0xff,0x1d,0x8e,0x38,0x1b,0x9a,0x54,0xff,0xef, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef,0xd9,0x2b,0x5d,0x9e, 0xff,0xff,0xbf,0xff,0xdf,0xff,0xff,0xff,0xff,0xef,0x5c,0x65,0x99,0x13,0xdc,0x7d, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7, 0xfa,0x2b,0x9e,0x9e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xba,0x44,0xfa,0x23, 0xbe,0xa6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xef,0x1a,0x2c,0x7e,0x96,0xff,0xff,0xff,0xff,0x3f,0xbf,0x1a,0x2c, 0x9a,0x34,0x7e,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0x19,0x2c,0x9f,0x9e,0xff,0xff,0x7e,0x9e, 0xda,0x1b,0xfc,0x54,0xdf,0xdf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef,0x1a,0x2c,0xdf,0x96, 0xfd,0x75,0xb9,0x13,0xdd,0x75,0xff,0xef,0xff,0xff,0xdf,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef, 0x5b,0x2c,0x9e,0x2c,0xf9,0x1b,0x9f,0x9e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xe7,0x5b,0x2c,0x5b,0x2c,0x5f,0xcf,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0xb7,0x5c,0xdf,0xdf,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

enum {
	DEBUG,
	HOME,
	MENU,
	CONFIG_TEMP_ALARM,
	CONFIG_HUMID_ALARM,
	CONFIG_SPEED_ALARM,
	ERROR_MODE
} state = CONFIG_TEMP_ALARM;

typedef struct {
	unsigned char updated;
	unsigned long raw;
	double value;
	double min, max;
} control_unit;

control_unit temp, humid, speed;

uint8_t buffer[30];
int last_x=0, last_y=0, last_state=0;
int redraw_info = 0;
int errNumber = 0;
int last_state_was_down = 0;

void init_state_machine() {
	temp.min = 20;
	temp.max = 40;
	humid.min = 50;
	humid.max = 80;
	speed.min = 10;
	speed.max = 40;
}
const unsigned char failure_img[854]= {0x42,0x4d,0x56,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x01,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x10,0xe5,0x08,0xe3,0x08,0xe2,0x08,0xe2,0x08,0xe2,0x10,0xe4,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x08,0xe2,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xc1,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x18,0xe5,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x18,0xe5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x18,0xe5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xfe,0xff,0xff,0xff,0xff,0xff,0x10,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xff,0xff,0x18,0xe5,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x10,0xe3,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xc1,0xff,0xff,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe5,0x00,0xc1,0x00,0xc1,0x10,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xfe,0xff,0x18,0xe5,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x10,0xe4,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0x10,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0x10,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe3,0x18,0xe5,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe5,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x10,0xe4,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xfe,0xff,0xff,0xff,0x10,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xff,0xff,0x10,0xe4,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xc2,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0xde,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x18,0xe5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x18,0xe5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x08,0xe3,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x00,0xc1,0x08,0xe2,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x18,0xe5,0x10,0xe3,0x08,0xe2,0x08,0xe2,0x08,0xe3,0x10,0xe5,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
const unsigned char success_img[854]={0x42,0x4d,0x56,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x01,0x00,0x10,0x00,0x03,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x10,0xc7,0x08,0x86,0x08,0x86,0x08,0x86,0x08,0x86,0x10,0xc7,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x08,0x86,0x00,0x45,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x00,0x45,0x08,0x86,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0xa7,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xde,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x10,0xa7,0xff,0xff,0xff,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xff,0xff,0xde,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xde,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xf8,0xc6,0x10,0xc7,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x10,0xc7,0x10,0xa7,0x00,0x45,0x00,0x65,0x00,0x45,0xde,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x66,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x10,0xa7,0x10,0xa7,0x00,0x45,0x00,0x65,0x00,0x65,0x08,0x66,0xff,0xff,0xff,0xff,0x00,0x66,0x00,0x45,0x00,0x65,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x10,0xa7,0x10,0xc7,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x45,0x08,0x86,0x08,0x86,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x45,0x10,0xc7,0xfe,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0xff,0xff,0xff,0xff,0xf8,0xc6,0x00,0x45,0x00,0x65,0x00,0x45,0xff,0xff,0xff,0xff,0x10,0xa7,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x66,0xf8,0xc6,0x00,0x45,0x00,0x65,0x00,0x45,0x10,0xa7,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xff,0x00,0x45,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x00,0x45,0xde,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x08,0x86,0x00,0x45,0x00,0x45,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x65,0x00,0x45,0x00,0x45,0x08,0x86,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0xc6,0x10,0xa6,0x08,0x86,0x08,0x86,0x10,0xa6,0x10,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
void displayState() {
	static int substate = 0;
	int updateSomething = (redraw_info == 0 || temp.updated || humid.updated || speed.updated);
	if (state == DEBUG) {
		//BSP_LCD_DrawBitmap(1,60,(uint8_t*)ImageBuffer);
		if (redraw_info == 0) {
			substate = 0;
			BSP_LCD_Clear(LCD_COLOR_WHITE);
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
			BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"01234567890123");
			BSP_LCD_DisplayStringAt(0,279,(uint8_t*)"VOLTAR ", RIGHT_MODE);
			BSP_LCD_DrawRect(111, 268, 115, 40);
		}

		sprintf((char*)buffer,"Temp=%4.2f s",HAL_GetTick()/1000.0);
		BSP_LCD_DisplayStringAtLine(2,(uint8_t*)buffer);

		sprintf((char*)buffer,"X=%03d,Y=%03d", last_x, last_y);
		BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buffer);

		if (errNumber != 0) {
			sprintf((char*)buffer,"errNumber=%03d ", errNumber);
			BSP_LCD_DisplayStringAtLine(6,(uint8_t*)buffer);
		} else if (updateSomething) {
			BSP_LCD_SetFont(&Font16);
			sprintf((char*)buffer," Temp  = %4.3f 'C", temp.value);
			BSP_LCD_DisplayStringAtLine(8,(uint8_t*)buffer);
			sprintf((char*)buffer," (raw) = %4d", temp.raw);
			BSP_LCD_DisplayStringAtLine(9,(uint8_t*)buffer);
			sprintf((char*)buffer," Humid = %4.3f %%", humid.value);
			BSP_LCD_DisplayStringAtLine(11,(uint8_t*)buffer);
			sprintf((char*)buffer," (raw) = %4d", humid.raw);
			BSP_LCD_DisplayStringAtLine(12,(uint8_t*)buffer);
			sprintf((char*)buffer," Veloc = %4.3f m/s", speed.value);
			BSP_LCD_DisplayStringAtLine(14,(uint8_t*)buffer);
			sprintf((char*)buffer," (raw) = %4d", speed.raw);
			BSP_LCD_DisplayStringAtLine(15,(uint8_t*)buffer);
			BSP_LCD_SetFont(&Font24);
			temp.updated = 0;
			humid.updated = 0;
			speed.updated = 0;
		}

		substate++;
		if (redraw_info == 0) {
			redraw_info = 1;
		} else if (redraw_info == 1) {
			redraw_info = 2;
		} else if (redraw_info == 2) {
			redraw_info = 0;
		}
	} else if (state == HOME) {
		if (redraw_info == 0) {
			BSP_LCD_Clear(LCD_COLOR_WHITE);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
			BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"  Trabalho 1  ");
			redraw_info = 1;
			BSP_LCD_DisplayStringAtLine(7,(uint8_t*)"   Alarmes   ");
			
			BSP_LCD_DisplayStringAt(1, 279,(uint8_t*)"CONFIG ", RIGHT_MODE);
			BSP_LCD_DrawRect(115, 268, 113, 40);
			BSP_LCD_DisplayStringAt(15,279,(uint8_t*)"DEBUG", LEFT_MODE);
			BSP_LCD_DrawRect(7, 268, 100, 40);
			
			BSP_LCD_DisplayStringAtLine(9,(uint8_t*)"   T   H   V  ");
			
			//sprintf((char*)buffer," DEBUG CONFIG "); BSP_LCD_DisplayStringAtLine(11,(uint8_t*)buffer);
			//BSP_LCD_DrawRect(8, 11*23+3, 102, 30);
			//BSP_LCD_DrawRect(113, 11*23+3, 114, 30);
		}
		if (updateSomething) {
			sprintf((char*)buffer,"Temp  = %03.1f C", temp.value);
			BSP_LCD_DisplayStringAtLine(3,(uint8_t*)buffer);
			sprintf((char*)buffer,"Humid = %03.1f %%", humid.value);
			BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buffer);
			sprintf((char*)buffer,"Vel = %03.1f m/s", speed.value);
			BSP_LCD_DisplayStringAtLine(5,(uint8_t*)buffer);
			temp.updated = 0;
			humid.updated = 0;
			speed.updated = 0;
			
			uint8_t * status_img;
			/* show status */
			status_img = (temp.value < temp.min || temp.value > temp.max) ?  ((uint8_t *) failure_img) : ((uint8_t *) success_img);
			BSP_LCD_DrawBitmap(40-10, 230, status_img);
			status_img = (humid.value < humid.min || humid.value > humid.max) ?  ((uint8_t *) failure_img) : ((uint8_t *) success_img);
			BSP_LCD_DrawBitmap(120-10, 230, status_img);
			status_img = (speed.value < speed.min || speed.value > speed.max) ?  ((uint8_t *) failure_img) : ((uint8_t *) success_img);
			BSP_LCD_DrawBitmap(200-10, 230, status_img);
		}
	} else if (state == MENU) {
		if (redraw_info == 0) {
			redraw_info = 1;
			BSP_LCD_Clear(LCD_COLOR_WHITE);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
			BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"     MENU     ");
			BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"  DE LIMITES  ");
			
			BSP_LCD_DisplayStringAt(0,40*3+5-10,(uint8_t*)"LIMITE TEMP", CENTER_MODE);
			BSP_LCD_DisplayStringAt(0,40*4+5,(uint8_t*)"LIMITE HUMID", CENTER_MODE);
			BSP_LCD_DisplayStringAt(0,40*5+5+10,(uint8_t*)"LIMITE VELOC", CENTER_MODE);
			
			BSP_LCD_DisplayStringAt(0,40*7+5,(uint8_t*)"VOLTAR", CENTER_MODE);
			BSP_LCD_DrawRect(10, 40*3-10, 220, 30);
			BSP_LCD_DrawRect(10, 40*4, 220, 30);
			BSP_LCD_DrawRect(10, 40*5+10, 220, 30);
			BSP_LCD_DrawRect(10, 40*7, 220, 30);
		}
	} else if (state == CONFIG_TEMP_ALARM || state == CONFIG_HUMID_ALARM || state == CONFIG_SPEED_ALARM) {
		if (redraw_info == 0) {
			BSP_LCD_Clear(LCD_COLOR_WHITE);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
			init_slider(0, 10, 120, 2);
			if (state == CONFIG_SPEED_ALARM) {
				BSP_LCD_DisplayStringAtLine(1,(uint8_t*)" CONFIG DE    ");
				BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"  VELOCIDADE  ");
				double min = speed.min, max = speed.max;
				// speed goes from 0 to 100, slider goes up to 220
				set_slider_values(0, min*2.2f, max*2.2f, 0);
			} else if (state == CONFIG_TEMP_ALARM) {
				BSP_LCD_DisplayStringAtLine(1,(uint8_t*)" CONFIG DE    ");
				BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"  TEMPERATURA ");
				double min = temp.min, max = temp.max;
				// temp goes from 0 to 100, slider goes up to 220
				set_slider_values(0, min*2.2f, max*2.2f, 0);
			} else if (state == CONFIG_HUMID_ALARM) {
				double min = temp.min, max = temp.max;
				// humid goes from 0 to 100, slider goes up to 220
				set_slider_values(0, min*2.2f, max*2.2f, 0);
				BSP_LCD_DisplayStringAtLine(1,(uint8_t*)" CONFIG DE    ");
				BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"   HUMIDADE   ");
			}
			redraw_info = 1;
			BSP_LCD_DisplayStringAt(0,40*7+5,(uint8_t*)"VOLTAR", CENTER_MODE);
			BSP_LCD_DrawRect(10, 40*7, 220, 30);
		}
		draw_slider(0);
		if (updateSomething) {
			if (state == CONFIG_TEMP_ALARM) {
				sprintf((char*)buffer,"Temp = %02.1f 'C", temp.value);
			} else if (state == CONFIG_HUMID_ALARM) {
				sprintf((char*)buffer,"Humid = %03.1f %%", humid.value);
			} else if (state == CONFIG_SPEED_ALARM) {
				sprintf((char*)buffer,"Vel = %03.1f m/s", speed.value);
			}
			BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buffer);

			if (state == CONFIG_TEMP_ALARM) {
				sprintf((char*)buffer," MIN = %02.1f 'C", temp.min);
			} else if (state == CONFIG_HUMID_ALARM) {
				sprintf((char*)buffer," MIN = %03.1f %%", humid.min);
			} else if (state == CONFIG_SPEED_ALARM) {
				sprintf((char*)buffer,"MIN = %03.1f m/s", speed.min);
			}
			BSP_LCD_DisplayStringAtLine(8,(uint8_t*)buffer);

			if (state == CONFIG_TEMP_ALARM) {
				sprintf((char*)buffer," MAX = %02.1f 'C", temp.max);
			} else if (state == CONFIG_HUMID_ALARM) {
				sprintf((char*)buffer," MAX = %03.1f %%", humid.max);
			} else if (state == CONFIG_SPEED_ALARM) {
				sprintf((char*)buffer,"MAX = %03.1f m/s", speed.max);
			}
			BSP_LCD_DisplayStringAtLine(9,(uint8_t*)buffer);
			updateSomething = 0;
			temp.updated = 0;
			humid.updated = 0;
			speed.updated = 0;
		}
	} else if (state == ERROR_MODE) {
		if (redraw_info == 0) {
			BSP_LCD_Clear(LCD_COLOR_WHITE);
			BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"     ERRO     ");
			sprintf((char*)buffer,"errNumber=%03d ", errNumber);
			BSP_LCD_DisplayStringAtLine(6,(uint8_t*)buffer);
		}
	}
	if (errNumber != 0) {
		redraw_info = 0;
		state = ERROR_MODE;
	}
}

/* called by slider_component.h */
void on_slider_value_change(int slider_id, int slider_selection, int value) {
	if (state == CONFIG_TEMP_ALARM && slider_selection == 0) {
		temp.min = value/2.2f;
	} else if (state == CONFIG_TEMP_ALARM && slider_selection == 1) {
		temp.max = value/2.2f;
	} else if (state == CONFIG_HUMID_ALARM && slider_selection == 0) {
		humid.min = value/2.2f;
	} else if (state == CONFIG_HUMID_ALARM && slider_selection == 1) {
		humid.max = value/2.2f;
	} else if (state == CONFIG_SPEED_ALARM && slider_selection == 0) {
		speed.min = value/2.2f;
	} else if (state == CONFIG_SPEED_ALARM && slider_selection == 1) {
		speed.max = value/2.2f;
	} else {
		errNumber = 8; // Unknown slider changed
	}
}

typedef enum {
	TOUCH_START=1,
	TOUCH_MOVE=2,
	TOUCH_END=3
} EVENT_TYPE;

int is_mouse_within(int mx, int my, int left, int top, int width, int height) {
	return (mx > left-5 && mx < left+width+5 && my > top-5 && my < top+height+5);
}

void processEvent(EVENT_TYPE type, int x, int y) {
	if (type == TOUCH_START) {
		if (state == DEBUG) {
			if (x > 111-5 && x < 111+115+5 && y > 268-5 && y < 265+40+5) {
				state = HOME;
				redraw_info = 0;
			}
		} else if (state == HOME) {
			/*BSP_LCD_DrawRect(118, 268, 110, 40);
			BSP_LCD_DisplayStringAt(15,279,(uint8_t*)"DEBUG", LEFT_MODE);
			BSP_LCD_DrawRect(7, 268, 100, 40);*/
			if (x > 118-5 && x < 118+110+5 && y > 268-5 && y < 265+40+5) {
				state = MENU;
			} else if (x > 7-5 && x < 7+100+5 && y > 268-5 && y < 265+40+5) {
				state = DEBUG;
			}
			redraw_info = 0;
		} else if (state == MENU) {
			if (is_mouse_within(x, y, 10, 40*2, 220, 30)) {
				//state = CONFIG_FAN_SPEED;
			} else if (is_mouse_within(x, y, 10, 40*3-10, 220, 30)) {
				state = CONFIG_TEMP_ALARM;
			} else if (is_mouse_within(x, y, 10, 40*4, 220, 30)) {
				state = CONFIG_HUMID_ALARM;
			} else if (is_mouse_within(x, y, 10, 40*5+10, 220, 30)) {
				state = CONFIG_SPEED_ALARM;
			} else if (is_mouse_within(x, y, 10, 40*7, 220, 30)) {
				state = HOME;
			}
			redraw_info = 0;
		}
	}
	if (state == CONFIG_TEMP_ALARM || state == CONFIG_HUMID_ALARM || state == CONFIG_SPEED_ALARM) {
		if (type == TOUCH_START && is_mouse_within(x, y, 10, 40*7, 220, 30)) {
			state = MENU;
			redraw_info = 0;
		} else {
			if (type == TOUCH_START) {
				slider_handle_mouse_down(x, y);
			} else if (type == TOUCH_MOVE) {
				slider_handle_mouse_move(x, y);
			} else if (type == TOUCH_END) {
				slider_handle_mouse_up(x, y);
			}
		}
		return;
	}
	last_x = x;
	last_y = y;
	last_state = type;
	//last_state = (type == TOUCH_START || type == TOUCH_MOVE);
	if (redraw_info == 2) {
		redraw_info = 1;
	}
}


void updateReadings() {
	static int x = 0;
	static unsigned char b1, b2;
	static unsigned long last_request = 0;
	unsigned long difTime;
	int ack;
	double raw;
	switch (x) {
		case 0: // Start communication
			start_i2c_SHT(); break;
		case 1: // Request humidity
			envia_byte_i2c(0x05);
			ack = read_ack_i2c();
			if (ack == 1) {
				errNumber = 1;
				x = -1;
			} else {
				last_request = HAL_GetTick();
				set_SDA_as_input();
			}
			break;
		case 2: // Wait for response of humidity
			difTime = HAL_GetTick()-last_request;
			if (difTime > 140) {
				errNumber = 2; // Timeout
				x = -1;
			} else if (difTime > 40) {
				if (difTime < 70) {
					HAL_Delay(2);
				}
				if (R(G, SDA) == 0) {
					b1 = 0;
					b2 = 0;
				} else {
					x--;
				}
			} else if (difTime > 0) {
				HAL_Delay(2);
				x--;
			} else {
				 x = -1; errNumber = 3; // Internally too fast
			}
			break;
		case 3:
			b1 = le_byte_i2c();
			break;
		case 4:
			b2 = le_byte_i2c();
			break;
		case 5:
			raw = ((0xf & b1) << 8) | b2;
			if (humid.raw != raw) {
				humid.raw = raw;
				humid.value = (double) -2.0468F+0.0367F*raw-1.5955E-6*raw*raw;
				humid.updated = 1;
			}
			break;
		case 6:
			break;
		case 7:
			start_i2c_SHT();
			break;
		case 8: // Request temp
			envia_byte_i2c(0x03);
			ack = read_ack_i2c();
			if (ack == 1) {
				x = -1; errNumber = 4;
			} else {
				last_request = HAL_GetTick();
				set_SDA_as_input();
			}
			break;
		case 9: // Wait for response of temp
			difTime = HAL_GetTick()-last_request;
			if (difTime > 340) {
				errNumber = 5; // Timeout
				x = -1;
			} else if (difTime > 50) {
				if (difTime < 70) {
					HAL_Delay(2);
				}
				if (R(G, SDA) == 0) {
					b1 = 0;
					b2 = 0;
				} else {
					x--;
				}
			} else if (difTime > 0) {
				HAL_Delay(2);
				x--;
			} else {
				 x = -1; errNumber = 6; // Internally too fast
			}
			break;
		case 10:
			b1 = le_byte_i2c();
			break;
		case 11:
			b2 = le_byte_i2c();
			break;
		case 12:
			raw = ((0xf & b1) << 8) | b2;
			if (temp.raw != raw) {
				temp.raw = raw;
				temp.value = (double) 0.025F*((double)raw)-36.6F;
				temp.updated = 1;
			}
			break;
		case 13:
			x = 0;
			start_i2c_SHT();
			break;
	}
	if (x >= 0 && x <= 20) {
		x = x>20?0:x+1;
	}
}
